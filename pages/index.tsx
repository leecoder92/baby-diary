import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import SearchBar from "../components/search";
import { useEffect, useState, useRef } from "react";
import dayjs from "dayjs";
import { useRouter } from "next/router";
import axios from "axios";
import DiaryBox from "../components/diaryBox";

interface Diary {
  title: string;
  contents: string;
  created_at: string;
}

const Home: NextPage = () => {
  const router = useRouter();
  const [diaries, setDiaries] = useState<Diary[]>();
  const [original, setOriginal] = useState<Diary[]>();

  useEffect(() => {
    axios({
      method: "get",
      url: "http://localhost:3000/api/diary",
    }).then((res) => {
      setDiaries(res.data);
      setOriginal(res.data);
    });
  }, []);

  const [page, setPage] = useState(10);

  useEffect(() => {
    document.addEventListener("scroll", () => {
      const { scrollHeight, scrollTop, clientHeight } =
        document.documentElement;
      if (scrollHeight - scrollTop === clientHeight) {
        loadMore();
      }
    });
  }, []);

  const loadMore = () => {
    setPage((prev) => prev + 10);
  };

  const [newLength, setNewLength] = useState<number>();
  const [newLoad, setNewLoad] = useState(false);

  useEffect(() => {
    const getNewDiary = setTimeout(() => {
      axios({
        method: "get",
        url: "/api/diary/new",
      }).then((res) => {
        setDiaries(res.data.newDiaryInfo);
        setOriginal(res.data.newDiaryInfo);
        setNewLength(res.data.newDiaries);
        setNewLoad(true);
      });
    }, 10000);
    return () => clearTimeout(getNewDiary);
  }, []);

  const handlePushRouter = (diary: Diary) => {
    if (original) {
      const originalIndex = original.findIndex(
        (item) => item.title === diary.title
      );
      if (newLoad) {
        router.push(`/new/${originalIndex}`);
      } else {
        router.push(`/diary/${originalIndex}`);
      }
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Baby Diary</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {diaries && (
        <SearchBar
          original={original}
          diaries={diaries}
          setDiaries={setDiaries}
          setPage={setPage}
        />
      )}

      <div style={{ marginTop: "20px" }}>
        {newLength && (
          <p style={{ textAlign: "center", marginBottom: "30px" }}>
            {newLength}개의 일기가 추가되었습니다.
          </p>
        )}
        {diaries &&
          diaries.slice(0, page).map((diary, index) => {
            return (
              <div key={index} onClick={() => handlePushRouter(diary)}>
                <DiaryBox diary={diary} />
              </div>
            );
          })}
      </div>
    </div>
  );
};

export default Home;
